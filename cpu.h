#ifndef CPU_H
#define CPU_H

#include "mappers.h"

struct CPU {
    Mapper *mapper;
    unsigned long long int cycles;
    unsigned char A;
    unsigned char X;
    unsigned char Y;
    unsigned char SP;
    unsigned short int PC;
    unsigned char STATUS; // N,V,0,B,D,I,Z,C
    void reset();
    unsigned char mem(unsigned short int address);
    void mem_store(unsigned short int address, unsigned char value);
    void set_ZN(unsigned char value);
    void stack_push(unsigned char value);
    void stack_push_16bit(unsigned short int value);
    unsigned char stack_pull();
    unsigned short int stack_pull_16bit();
    bool page_cross_AX();
    bool page_cross_AY();
    bool page_cross_IY(); 
    unsigned char get_carry();
    unsigned char get_zero(); 
    unsigned char get_interrupt_disable();
    unsigned char get_brk();
    unsigned char get_overflow(); 
    unsigned char get_negative();
    void set_carry();
    void set_zero();
    void set_interrupt_disable();
    void set_decimal();
    void set_brk();
    void set_overflow();
    void set_negative();
    void clear_carry();
    void clear_zero();
    void clear_interrupt_disable();
    void clear_decimal();
    void clear_brk();
    void clear_overflow();
    void clear_negative();
    unsigned short int ZP_addressing();
    unsigned short int ZPX_addressing(); 
    unsigned short int ZPY_addressing(); 
    unsigned short int A_addressing(); 
    unsigned short int AX_addressing(); 
    unsigned short int AY_addressing();
    unsigned short int IX_addressing(); 
    unsigned short int IY_addressing();
};

void ADC(CPU &cpu, unsigned char operand);
void ADC_I(CPU &cpu);
void ADC_ZP(CPU &cpu);
void ADC_ZPX(CPU &cpu);
void ADC_A(CPU &cpu);
void ADC_AX(CPU &cpu);
void ADC_AY(CPU &cpu);
void ADC_IX(CPU &cpu);
void ADC_IY(CPU &cpu);
void AND(CPU &cpu, unsigned char operand);
void AND_I(CPU &cpu);
void AND_ZP(CPU &cpu);
void AND_ZPX(CPU &cpu);
void AND_A(CPU &cpu);
void AND_AX(CPU &cpu);
void AND_AY(CPU &cpu);
void AND_IX(CPU &cpu);
void AND_IY(CPU &cpu);
void ASL_AC(CPU &cpu);
void ASL_ZP(CPU &cpu);
void ASL_ZPX(CPU &cpu);
void ASL_A(CPU &cpu);
void ASL_AX(CPU &cpu);
void BCC(CPU &cpu);
void BCS(CPU &cpu);
void BEQ(CPU &cpu);
void BIT(CPU &cpu, unsigned char operand);
void BIT_ZP(CPU &cpu);
void BIT_A(CPU &cpu);
void BMI(CPU &cpu);
void BNE(CPU &cpu);
void BPL(CPU &cpu);
void BRK(CPU &cpu);
void BVC(CPU &cpu);
void BVS(CPU &cpu);
void CLC(CPU &cpu);
void CLD(CPU &cpu);
void CLI(CPU &cpu);
void CLV(CPU &cpu);
void CMP(CPU &cpu, unsigned char operand);
void CMP_I(CPU &cpu);
void CMP_ZP(CPU &cpu);
void CMP_ZPX(CPU &cpu);
void CMP_A(CPU &cpu);
void CMP_AX(CPU &cpu);
void CMP_AY(CPU &cpu);
void CMP_IX(CPU &cpu);
void CMP_IY(CPU &cpu);
void CPX(CPU &cpu, unsigned char operand);
void CPX_I(CPU &cpu);
void CPX_ZP(CPU &cpu);
void CPX_A(CPU &cpu);
void CPY(CPU &cpu, unsigned char operand);
void CPY_I(CPU &cpu);
void CPY_ZP(CPU &cpu);
void CPY_A(CPU &cpu);
void DEC(CPU &cpu, unsigned short int address);
void DEC_ZP(CPU &cpu);
void DEC_ZPX(CPU &cpu);
void DEC_A(CPU &cpu);
void DEC_AX(CPU &cpu);
void DEX(CPU &cpu);
void DEY(CPU &cpu);
void EOR(CPU &cpu, unsigned char operand);
void EOR_I(CPU &cpu);
void EOR_ZP(CPU &cpu);
void EOR_ZPX(CPU &cpu);
void EOR_A(CPU &cpu);
void EOR_AX(CPU &cpu);
void EOR_AY(CPU &cpu);
void EOR_IX(CPU &cpu);
void EOR_IY(CPU &cpu);
void INC(CPU &cpu, unsigned short int address);
void INC_ZP(CPU &cpu);
void INC_ZPX(CPU &cpu);
void INC_A(CPU &cpu);
void INC_AX(CPU &cpu);
void INX(CPU &cpu);
void INY(CPU &cpu);
void JMP_A(CPU &cpu);
void JMP_I(CPU &cpu);
void JSR(CPU &cpu);
void LDA_I(CPU &cpu);
void LDA_ZP(CPU &cpu);
void LDA_ZPX(CPU &cpu);
void LDA_A(CPU &cpu);
void LDA_AX(CPU &cpu);
void LDA_AY(CPU &cpu);
void LDA_IX(CPU &cpu);
void LDA_IY(CPU &cpu);
void LDX_I(CPU &cpu);
void LDX_ZP(CPU &cpu);
void LDX_ZPY(CPU &cpu);
void LDX_A(CPU &cpu);
void LDX_AY(CPU &cpu);
void LDY_I(CPU &cpu);
void LDY_ZP(CPU &cpu);
void LDY_ZPX(CPU &cpu);
void LDY_A(CPU &cpu);
void LDY_AX(CPU &cpu);
void LSR_AC(CPU &cpu);
void LSR_ZP(CPU &cpu);
void LSR_ZPX(CPU &cpu);
void LSR_A(CPU &cpu);
void LSR_AX(CPU &cpu);
void NOP(CPU &cpu);
void ORA_I(CPU &cpu);
void ORA_ZP(CPU &cpu);
void ORA_ZPX(CPU &cpu);
void ORA_A(CPU &cpu);
void ORA_AX(CPU &cpu);
void ORA_AY(CPU &cpu);
void ORA_IX(CPU &cpu);
void ORA_IY(CPU &cpu);
void PHA(CPU &cpu);
void PHP(CPU &cpu);
void PLA(CPU &cpu);
void PLP(CPU &cpu);
unsigned char ROL(CPU &cpu, unsigned char operand);
void ROL_AC(CPU &cpu);
void ROL_ZP(CPU &cpu);
void ROL_ZPX(CPU &cpu);
void ROL_A(CPU &cpu);
void ROL_AX(CPU &cpu);
unsigned char ROR(CPU &cpu, unsigned char operand);
void ROR_AC(CPU &cpu);
void ROR_ZP(CPU &cpu);
void ROR_ZPX(CPU &cpu);
void ROR_A(CPU &cpu);
void ROR_AX(CPU &cpu);
void RTI(CPU &cpu);
void RTS(CPU &cpu);
void SBC_I(CPU &cpu);
void SBC_ZP(CPU &cpu);
void SBC_ZPX(CPU &cpu);
void SBC_A(CPU &cpu);
void SBC_AX(CPU &cpu);
void SBC_AY(CPU &cpu);
void SBC_IX(CPU &cpu);
void SBC_IY(CPU &cpu);
void SEC(CPU &cpu);
void SED(CPU &cpu);
void SEI(CPU &cpu);
void STA_ZP(CPU &cpu);
void STA_ZPX(CPU &cpu);
void STA_A(CPU &cpu);
void STA_AX(CPU &cpu);
void STA_AY(CPU &cpu);
void STA_IX(CPU &cpu);
void STA_IY(CPU &cpu);
void STX_ZP(CPU &cpu);
void STX_ZPY(CPU &cpu);
void STX_A(CPU &cpu);
void STY_ZP(CPU &cpu);
void STY_ZPX(CPU &cpu);
void STY_A(CPU &cpu);  
void TAX(CPU &cpu);  
void TAY(CPU &cpu);
void TSX(CPU &cpu);
void TXA(CPU &cpu);
void TXS(CPU &cpu);
void TYA(CPU &cpu);
std::unordered_map<unsigned char, std::function<void(CPU &)> > opcode_map();

#endif