#ifndef CPU_H
#define CPU_H

#include <unordered_map>
#include "../mappers/mappers.h"

class CPU {
    public:
        CPU(Mapper *mapper);
        void reset();
        void run_next_instruction();
        unsigned char get_A();
        unsigned char get_X();
        unsigned char get_Y();
        unsigned char get_SP();
        unsigned char get_STATUS();
        unsigned short int get_PC();
        unsigned long long int get_cycles();
        
    private:
        class instructions {
            public:
                instructions();
                void run_instruction(CPU &cpu, unsigned char opcode);
            private:
                std::unordered_map<unsigned char, std::function<void(CPU &)> > opcode_to_inst;
                std::unordered_map<unsigned char, std::function<void(CPU &)> > opcode_map();
                static void ADC(CPU &cpu, unsigned char operand);
                static void ADC_I(CPU &cpu);
                static void ADC_ZP(CPU &cpu);
                static void ADC_ZPX(CPU &cpu);
                static void ADC_A(CPU &cpu);
                static void ADC_AX(CPU &cpu);
                static void ADC_AY(CPU &cpu);
                static void ADC_IX(CPU &cpu);
                static void ADC_IY(CPU &cpu);
                static void AND(CPU &cpu, unsigned char operand);
                static void AND_I(CPU &cpu);
                static void AND_ZP(CPU &cpu);
                static void AND_ZPX(CPU &cpu);
                static void AND_A(CPU &cpu);
                static void AND_AX(CPU &cpu);
                static void AND_AY(CPU &cpu);
                static void AND_IX(CPU &cpu);
                static void AND_IY(CPU &cpu);
                static void ASL_AC(CPU &cpu);
                static void ASL_ZP(CPU &cpu);
                static void ASL_ZPX(CPU &cpu);
                static void ASL_A(CPU &cpu);
                static void ASL_AX(CPU &cpu);
                static void BCC(CPU &cpu);
                static void BCS(CPU &cpu);
                static void BEQ(CPU &cpu);
                static void BIT(CPU &cpu, unsigned char operand);
                static void BIT_ZP(CPU &cpu);
                static void BIT_A(CPU &cpu);
                static void BMI(CPU &cpu);
                static void BNE(CPU &cpu);
                static void BPL(CPU &cpu);
                static void BRK(CPU &cpu);
                static void BVC(CPU &cpu);
                static void BVS(CPU &cpu);
                static void CLC(CPU &cpu);
                static void CLD(CPU &cpu);
                static void CLI(CPU &cpu);
                static void CLV(CPU &cpu);
                static void CMP(CPU &cpu, unsigned char operand);
                static void CMP_I(CPU &cpu);
                static void CMP_ZP(CPU &cpu);
                static void CMP_ZPX(CPU &cpu);
                static void CMP_A(CPU &cpu);
                static void CMP_AX(CPU &cpu);
                static void CMP_AY(CPU &cpu);
                static void CMP_IX(CPU &cpu);
                static void CMP_IY(CPU &cpu);
                static void CPX(CPU &cpu, unsigned char operand);
                static void CPX_I(CPU &cpu);
                static void CPX_ZP(CPU &cpu);
                static void CPX_A(CPU &cpu);
                static void CPY(CPU &cpu, unsigned char operand);
                static void CPY_I(CPU &cpu);
                static void CPY_ZP(CPU &cpu);
                static void CPY_A(CPU &cpu);
                static void DEC(CPU &cpu, unsigned short int address);
                static void DEC_ZP(CPU &cpu);
                static void DEC_ZPX(CPU &cpu);
                static void DEC_A(CPU &cpu);
                static void DEC_AX(CPU &cpu);
                static void DEX(CPU &cpu);
                static void DEY(CPU &cpu);
                static void EOR(CPU &cpu, unsigned char operand);
                static void EOR_I(CPU &cpu);
                static void EOR_ZP(CPU &cpu);
                static void EOR_ZPX(CPU &cpu);
                static void EOR_A(CPU &cpu);
                static void EOR_AX(CPU &cpu);
                static void EOR_AY(CPU &cpu);
                static void EOR_IX(CPU &cpu);
                static void EOR_IY(CPU &cpu);
                static void INC(CPU &cpu, unsigned short int address);
                static void INC_ZP(CPU &cpu);
                static void INC_ZPX(CPU &cpu);
                static void INC_A(CPU &cpu);
                static void INC_AX(CPU &cpu);
                static void INX(CPU &cpu);
                static void INY(CPU &cpu);
                static void JMP_A(CPU &cpu);
                static void JMP_I(CPU &cpu);
                static void JSR(CPU &cpu);
                static void LDA_I(CPU &cpu);
                static void LDA_ZP(CPU &cpu);
                static void LDA_ZPX(CPU &cpu);
                static void LDA_A(CPU &cpu);
                static void LDA_AX(CPU &cpu);
                static void LDA_AY(CPU &cpu);
                static void LDA_IX(CPU &cpu);
                static void LDA_IY(CPU &cpu);
                static void LDX_I(CPU &cpu);
                static void LDX_ZP(CPU &cpu);
                static void LDX_ZPY(CPU &cpu);
                static void LDX_A(CPU &cpu);
                static void LDX_AY(CPU &cpu);
                static void LDY_I(CPU &cpu);
                static void LDY_ZP(CPU &cpu);
                static void LDY_ZPX(CPU &cpu);
                static void LDY_A(CPU &cpu);
                static void LDY_AX(CPU &cpu);
                static void LSR_AC(CPU &cpu);
                static void LSR_ZP(CPU &cpu);
                static void LSR_ZPX(CPU &cpu);
                static void LSR_A(CPU &cpu);
                static void LSR_AX(CPU &cpu);
                static void NOP(CPU &cpu);
                static void ORA_I(CPU &cpu);
                static void ORA_ZP(CPU &cpu);
                static void ORA_ZPX(CPU &cpu);
                static void ORA_A(CPU &cpu);
                static void ORA_AX(CPU &cpu);
                static void ORA_AY(CPU &cpu);
                static void ORA_IX(CPU &cpu);
                static void ORA_IY(CPU &cpu);
                static void PHA(CPU &cpu);
                static void PHP(CPU &cpu);
                static void PLA(CPU &cpu);
                static void PLP(CPU &cpu);
                static unsigned char ROL(CPU &cpu, unsigned char operand);
                static void ROL_AC(CPU &cpu);
                static void ROL_ZP(CPU &cpu);
                static void ROL_ZPX(CPU &cpu);
                static void ROL_A(CPU &cpu);
                static void ROL_AX(CPU &cpu);
                static unsigned char ROR(CPU &cpu, unsigned char operand);
                static void ROR_AC(CPU &cpu);
                static void ROR_ZP(CPU &cpu);
                static void ROR_ZPX(CPU &cpu);
                static void ROR_A(CPU &cpu);
                static void ROR_AX(CPU &cpu);
                static void RTI(CPU &cpu);
                static void RTS(CPU &cpu);
                static void SBC_I(CPU &cpu);
                static void SBC_ZP(CPU &cpu);
                static void SBC_ZPX(CPU &cpu);
                static void SBC_A(CPU &cpu);
                static void SBC_AX(CPU &cpu);
                static void SBC_AY(CPU &cpu);
                static void SBC_IX(CPU &cpu);
                static void SBC_IY(CPU &cpu);
                static void SEC(CPU &cpu);
                static void SED(CPU &cpu);
                static void SEI(CPU &cpu);
                static void STA_ZP(CPU &cpu);
                static void STA_ZPX(CPU &cpu);
                static void STA_A(CPU &cpu);
                static void STA_AX(CPU &cpu);
                static void STA_AY(CPU &cpu);
                static void STA_IX(CPU &cpu);
                static void STA_IY(CPU &cpu);
                static void STX_ZP(CPU &cpu);
                static void STX_ZPY(CPU &cpu);
                static void STX_A(CPU &cpu);
                static void STY_ZP(CPU &cpu);
                static void STY_ZPX(CPU &cpu);
                static void STY_A(CPU &cpu);  
                static void TAX(CPU &cpu);  
                static void TAY(CPU &cpu);
                static void TSX(CPU &cpu);
                static void TXA(CPU &cpu);
                static void TXS(CPU &cpu);
                static void TYA(CPU &cpu);
        };
        instructions *inst;
        std::unordered_map<unsigned char, std::function<void(CPU &)> > opcode_map;
        Mapper *mapper;
        unsigned long long int cycles;
        unsigned char A;
        unsigned char X;
        unsigned char Y;
        unsigned char SP;
        unsigned short int PC;
        unsigned char STATUS; // N,V,0,B,D,I,Z,C
        unsigned char mem(unsigned short int address);
        void mem_store(unsigned short int address, unsigned char value);
        void set_ZN(unsigned char value);
        void stack_push(unsigned char value);
        void stack_push_16bit(unsigned short int value);
        unsigned char stack_pull();
        unsigned short int stack_pull_16bit();
        bool page_cross_AX();
        bool page_cross_AY();
        bool page_cross_IY(); 
        unsigned char get_carry();
        unsigned char get_zero(); 
        unsigned char get_interrupt_disable();
        unsigned char get_brk();
        unsigned char get_overflow(); 
        unsigned char get_negative();
        void set_carry();
        void set_zero();
        void set_interrupt_disable();
        void set_decimal();
        void set_brk();
        void set_overflow();
        void set_negative();
        void clear_carry();
        void clear_zero();
        void clear_interrupt_disable();
        void clear_decimal();
        void clear_brk();
        void clear_overflow();
        void clear_negative();
        unsigned short int ZP_addressing();
        unsigned short int ZPX_addressing(); 
        unsigned short int ZPY_addressing(); 
        unsigned short int A_addressing(); 
        unsigned short int AX_addressing(); 
        unsigned short int AY_addressing();
        unsigned short int IX_addressing(); 
        unsigned short int IY_addressing();
};

#endif